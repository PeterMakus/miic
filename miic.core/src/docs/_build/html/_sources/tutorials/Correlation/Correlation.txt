.. _basics_correlation_tutorial:

=========================
Ambient Noise Correlation
=========================

************
Introduction
************

The correlation of ambient vibration records is the fundamental step of
interferometric seimsic processing. The MIIC `MIIC Software Suite 
<https://github.com/miic-sw/miic>`_ provides tools to calculate such noise 
correlation function including various preprocessing steps.

*************************
The Central Functionality
*************************

The usual processing flow consists of
 * initializing the project
 * reading data
 * setting the combinations to be correlated
 * preprocessing of data
 * correlation
 * storing correlation
 
This functionality is implemented in the :func:`~miic.scripts.calculate_noise_correlations.paracorr` function. As the computation of corrlation functions works cronologically the correlation functions for every station combination are distributed over several output files written during the computation. For the later processing that usually operates on all correlation function of a single station combination the correlation functions are to be rearranged. This can be done with the :func:`~miic.scripts.calculate_noise_correlations.paracorr.merge_corr_results` function.

**************************
Implementation in a Script
**************************

Both the computation of noise correlation functions and the rearrangement is implemented in the module ``miic.scripts.calculate_noise_correlations`` that can be executed as a script :download:`(download here) <../../../miic/scripts/calculate_noise_correlations.py>`. Since the computation of correlation functions is implemented for parallel execution using ``mpi4py`` the script should be executed using ``mpirun -n 4 python calculate_noise_correlations.py monitoring_parameters.yaml`` or another suitable call depending on the job submission system.

The parameters for :func:`~miic.scripts.calculate_noise_correlations.paracorr` and :func:`~miic.scripts.calculate_noise_correlations.merge_corr_results` are read from a `yaml <http://yaml.org>`_ parameter file described below. The name of the parameter file is to be given as command line argument when ``calculate_noise_correlations.py`` is executed as a python programm. 

**************
Parameter File
**************

The present script uses different section of the :download:`parameter file <../../../miic/scripts/monitoring_project.yaml>`. There is a general section of *projekt wide parameters* describing parameters relevant for all processing setps::

    #### Project wide parameters
    # lowest level project directory
    proj_dir : 'monitoring_project'
    # directory for logging information
    log_subdir : 'log'
    # folder for figures
    fig_subdir : 'figures'
       
The *net* section describes the raw seismic data including the stations and channels to be used::

    #### parameters that are network specific
    net:
        # list of stations used in the project
        # type: list of strings of type 'NET.STATION'
        stations : ['GR.CLL','GR.CLZ','GR.RUE']
        # list of channels
        # type: list of strings
        channels : ['BHZ','BHN','BHE']
        # path to the file that stores the coordinates of the stations
        # type: string
        coordinate_file : 'coordinates.txt'
        # file system structure
        # list of strings and lists
        fss : ['/DATA/mseed','%STA',['%sta','%y','%m','%d','??????','.','%cha']]

The format of the *net.coordinate_file* is described in :func:`~miic.core.miic_utils.lat_lon_ele_load`. 

The ``co`` section describes how the noise correlations are calculated. It consists of some general parameters like start and end time, length of segments to read and the time increment for stepping through the data. Using ``read_len : 3600`` and ``read_inc : 1800`` will lead to correlations from 1 hour segments overlapping half an hour. To increase the efficiency of the reading process by reading data in one file as a whole and to improve the preprocessing by proceccing longer segments it is possible to read in long sequences e.g. 1 day and subdivide it later on for independent correlation of shorter segments. Independently correlating shorter e.g. 1 hour segments increases the temporal resolution an allows for normalization in the stacking which down weights high amplitude perturbations. (If data is stored in 24 h files it is usefull to start one second after midnight and end a second before to avoid reading neighboring files.) The ``combinatination_method`` describes which of the available channels are to be correlated. Possible values are described in :func:`~miic.core.script_utils.combine_station_channels`. Functions listed in ``co.preProcessing`` are applied to the read data streams of length ``co.read_len``. If the read traces are to be subdivided into shorter segments this is done with the ``co.subdivision`` key. The correlations of these segments can be recombined again. The individual short segment correlations can in this case be deleted if not intended for further use. The actual correlation is described using ``co.corr_args`` key which describes the parallelized part of the correlation calculation. This is detailed in 
:func:`~miic.core.pxcorr_func.stream_pxcorr`.::

    #### parameters for correlation (emperical Green's function creation)
    co:
        # subdirectory of 'proj_dir' to store correlation
        # type: string
        subdir : 'corr'
        # times sequences to read for cliping or muting on stream basis
        # These should be long enough for the reference (e.g. the standard
        # deviation) to be rather independent of the parts to remove
        # type: string
        read_start : '2015-05-1 00:00:01.0'
        read_end : '2016-1-1 00:00:00.0'
        # type: float [seconds]
        read_len : 86398
        read_inc : 86400
    
        # required input sampling rate (data with different sampling rate are not used)
        # type: float [Hz]
        sampling_rate : 100
        # decimation factor (sampling_rate(correlation)=sampling_rate(date)/decimation)
        # decimation <= 1 mean no decimation
        # type: int
        decimation : 5
    
        # Method to combine different traces
        combination_method : 'betweenStations'
    
        # preprocessing of the original length time series
        # these function work on an obspy.Stream object given as first argument
        # and return an obspy.Stream object.
        preProcessing : [{'function':'miic.core.stream.stream_filter',
                          'args':{'ftype':'bandpass',
                                  'filter_option':{'freqmin':0.01,
                                                   'freqmax':9},
                                  'parallel':False}},
                         #{'function':'miic.core.stream.stream_mute',
                         # 'args':{'taper_len':100,
                         #         'mute_method':'std_factor',
                         #         'mute_value':3}}
                        ]
        # subdevision of the read sequences for correlation
        # type: presence of this key 
        subdivision:
            # type: float [seconds]
            corr_inc : 3600
            corr_len : 3600
            # recombine these subdivisions
            # type: boolean
            recombine_subdivision : True
            # delete 
            # type: booblean
            delete_subdivisions : False
    
        # parameters for correlation preprocessing
        corr_args : {'TDpreProcessing':[#{'function':'miic.core.pxcorr_func.detrend',
                                        # 'args':{'type':'constant'}},
                                       #{'function':'miic.core.pxcorr_func.TDfilter',
                                       # 'args':{'type':'bandpass','freqmin':0.01,'freqmax':4}},
                                        #{'function':'miic.core.pxcorr_func.mute',
                                        # 'args':{'taper_len':100.,
                                               # 'threshold':1000, absolute threshold
                                        #         'std_factor':3,
                                        #         'filter':{'type':'bandpass','freqmin':2,'freqmax':4},
                                        #         'extend_gaps':True}},
                                       {'function':'miic.core.pxcorr_func.clip',
                                        'args':{'std_factor':3}},
                                       ],
                     'FDpreProcessing':[{'function':'miic.core.pxcorr_func.spectralWhitening',
                                         'args':{'joint_norm':False}},
                                        {'function':'miic.core.pxcorr_func.FDfilter',
                                         'args':{'freqs':[0.01,0.02,9,10]}}
                                        ],
                     'lengthToSave':100,
                     'center_correlation':True,      # make sure zero correlation time is in the center
                     'normalize_correlation':True,
                     'combinations':[],
                     'direct_output':{'function':'convert_to_matlab',
                                      'base_name':'trace'}
                    }
    
        # Component rotation (only possible if 'direct_output' is not in 'corr_args')
        # type: string ['NO', 'ZNE->ZRT', 'NE->RT']
        rotation : 'NO'
    

Once the correlation are computed they can be analysed for potential changes of the seismic velocity as described in :ref:`measure_velocity_change_tutorial`.
